[["index.html", "Real-world function writing Overview", " Real-world function writing Liza Wood 2023-05-03 Overview This is a mini-lecture walking through the usefulness of function-writing and iteration using an example of reading in a large number of data files from the US Patent Office. "],["functions-can-be-like-personalized-mini-packages.html", "Functions can be like personalized Mini Packages", " Functions can be like personalized Mini Packages There are two main uses for functions that I can think of right now, one is to make yourself nifty little mini packages and the other is to make iteration easier. Let’s start with the first instance You may often find yourself in a situation where you need to do the same thing (or set of things) in R, over and over again. One thing that I often want to do is to look at a plant species range map. I generally pull occurence data from the Global Biodiversity Information Facility (GBIF), limiting the search to locations correspoding to a museum collection. This does not take many lines of code but I usually have to look it up. To make my life easier I can write a function to do this task and save the function to be accessible in any of my R sessions. The first step is to call GBIF and import the dataset of species occurrences library(rgbif) library(ggplot2) GBIF_Frax = occ_search(scientificName = &quot;Fraxinus velutina&quot;, hasCoordinate = TRUE, basisOfRecord = &quot;PRESERVED_SPECIMEN&quot;) Then I need to select just the data not the metadata that comes with Frax_dat &lt;- GBIF_Frax$data Then I can plot the occurrences wm &lt;- borders(&quot;world&quot;, colour=&quot;gray50&quot;, fill=&quot;gray50&quot;) #map backgroud ggplot()+ coord_fixed() + wm + geom_point(data = Frax_dat, aes(x = decimalLongitude, y = decimalLatitude), colour = &quot;darkred&quot;, size = 0.5) + theme_bw() + ggtitle(Frax_dat$scientificName) This is a fairly easy piece of code to turn into a function. If I were to do this with a different species, the only peice of information that changes is the speices name. So in my function, that is what I specify as the variable. dist_map &lt;- function(x) { GBIFdata = occ_search(scientificName = x, limit = 300, hasCoordinate = TRUE, basisOfRecord = &quot;PRESERVED_SPECIMEN&quot;) dat = GBIFdata$data wm = borders(&quot;world&quot;, colour=&quot;gray50&quot;, fill=&quot;gray50&quot;) #map backgroud p = ggplot()+ coord_fixed() + wm + geom_point(data = dat, aes(x = decimalLongitude, y = decimalLatitude), colour = &quot;darkred&quot;, size = 0.5) + theme_bw() + ggtitle(dat$scientificName) plot_list = p # save plot return(p) } Now when I want a species range map I can just use one line of code dist_map(&quot;Fremontodendron californicum&quot;) I can save that function to a separate script if I want to use it again in the future. I have a directory for my functions “~Desktop/R-functions” where I saved it. Now I can call it in any of my other script using the source() function. source(&quot;~/Desktop/R_functions/dist_map.R&quot;) dist_map(&quot;Fremontodendron californicum&quot;) "],["repetitive-coding-tasks.html", "Repetitive coding tasks", " Repetitive coding tasks The second thing functions are super useful for is iterating processes. Sometime we need to run the same few lines of code hundreds of times. This is true in this (real-world) example of working with US patent data. This (very clunky) database allows you to download all of the patents granted by week. What’s more is that the data are not so clean, and so each csv requires some cleaning be done on each of them. So if we wanted to aggregate clean patent data over multiple weeks, months, or years, we would need to run the same chunk of code (reading in and cleaning the data) over 100 times, each time with only minor alteration. This is the kind of thing that we can use function writing and iteration to our advantage. Note: How should we even be reading in and storing lots of data like this? I store my data on Box and download the Box app onto my computer so that I can find an easy filepath there. Here are the files I am working with for this example: 104 weeks of US patent data for 1977 and 1978 list.files(&quot;~/Box/d-rug/data&quot;) ## [1] &quot;uspto_1977_10.csv&quot; &quot;uspto_1977_11.csv&quot; &quot;uspto_1977_12.csv&quot; ## [4] &quot;uspto_1977_13.csv&quot; &quot;uspto_1977_14.csv&quot; &quot;uspto_1977_15.csv&quot; ## [7] &quot;uspto_1977_16.csv&quot; &quot;uspto_1977_17.csv&quot; &quot;uspto_1977_18.csv&quot; ## [10] &quot;uspto_1977_19.csv&quot; &quot;uspto_1977_20.csv&quot; &quot;uspto_1977_21.csv&quot; ## [13] &quot;uspto_1977_22.csv&quot; &quot;uspto_1977_23.csv&quot; &quot;uspto_1977_24.csv&quot; ## [16] &quot;uspto_1977_25.csv&quot; &quot;uspto_1977_26.csv&quot; &quot;uspto_1977_27.csv&quot; ## [19] &quot;uspto_1977_28.csv&quot; &quot;uspto_1977_29.csv&quot; &quot;uspto_1977_3.csv&quot; ## [22] &quot;uspto_1977_30.csv&quot; &quot;uspto_1977_31.csv&quot; &quot;uspto_1977_32.csv&quot; ## [25] &quot;uspto_1977_33.csv&quot; &quot;uspto_1977_34.csv&quot; &quot;uspto_1977_35.csv&quot; ## [28] &quot;uspto_1977_36.csv&quot; &quot;uspto_1977_37.csv&quot; &quot;uspto_1977_38.csv&quot; ## [31] &quot;uspto_1977_39.csv&quot; &quot;uspto_1977_4.csv&quot; &quot;uspto_1977_40.csv&quot; ## [34] &quot;uspto_1977_41.csv&quot; &quot;uspto_1977_42.csv&quot; &quot;uspto_1977_43.csv&quot; ## [37] &quot;uspto_1977_44.csv&quot; &quot;uspto_1977_45.csv&quot; &quot;uspto_1977_46.csv&quot; ## [40] &quot;uspto_1977_47.csv&quot; &quot;uspto_1977_48.csv&quot; &quot;uspto_1977_49.csv&quot; ## [43] &quot;uspto_1977_5.csv&quot; &quot;uspto_1977_50.csv&quot; &quot;uspto_1977_51.csv&quot; ## [46] &quot;uspto_1977_52.csv&quot; &quot;uspto_1977_6.csv&quot; &quot;uspto_1977_7.csv&quot; ## [49] &quot;uspto_1977_8.csv&quot; &quot;uspto_1977_9.csv&quot; &quot;uspto_1978_10.csv&quot; ## [52] &quot;uspto_1978_11.csv&quot; &quot;uspto_1978_12.csv&quot; &quot;uspto_1978_13.csv&quot; ## [55] &quot;uspto_1978_14.csv&quot; &quot;uspto_1978_15.csv&quot; &quot;uspto_1978_16.csv&quot; ## [58] &quot;uspto_1978_17.csv&quot; &quot;uspto_1978_18.csv&quot; &quot;uspto_1978_19.csv&quot; ## [61] &quot;uspto_1978_20.csv&quot; &quot;uspto_1978_21.csv&quot; &quot;uspto_1978_22.csv&quot; ## [64] &quot;uspto_1978_23.csv&quot; &quot;uspto_1978_24.csv&quot; &quot;uspto_1978_25.csv&quot; ## [67] &quot;uspto_1978_26.csv&quot; &quot;uspto_1978_27.csv&quot; &quot;uspto_1978_28.csv&quot; ## [70] &quot;uspto_1978_29.csv&quot; &quot;uspto_1978_3.csv&quot; &quot;uspto_1978_30.csv&quot; ## [73] &quot;uspto_1978_31.csv&quot; &quot;uspto_1978_32.csv&quot; &quot;uspto_1978_33.csv&quot; ## [76] &quot;uspto_1978_34.csv&quot; &quot;uspto_1978_35.csv&quot; &quot;uspto_1978_36.csv&quot; ## [79] &quot;uspto_1978_37.csv&quot; &quot;uspto_1978_38.csv&quot; &quot;uspto_1978_39.csv&quot; ## [82] &quot;uspto_1978_4.csv&quot; &quot;uspto_1978_40.csv&quot; &quot;uspto_1978_41.csv&quot; ## [85] &quot;uspto_1978_42.csv&quot; &quot;uspto_1978_43.csv&quot; &quot;uspto_1978_44.csv&quot; ## [88] &quot;uspto_1978_45.csv&quot; &quot;uspto_1978_46.csv&quot; &quot;uspto_1978_47.csv&quot; ## [91] &quot;uspto_1978_48.csv&quot; &quot;uspto_1978_49.csv&quot; &quot;uspto_1978_5.csv&quot; ## [94] &quot;uspto_1978_50.csv&quot; &quot;uspto_1978_51.csv&quot; &quot;uspto_1978_52.csv&quot; ## [97] &quot;uspto_1978_6.csv&quot; &quot;uspto_1978_7.csv&quot; &quot;uspto_1978_8.csv&quot; ## [100] &quot;uspto_1978_9.csv&quot; What would this look like if I were to go through each files one by one… # Load in that lubridate package first library(lubridate) patent77_1 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_10.csv&quot;) patent77_1$App_Date &lt;- ymd(as.character(patent77_1$App_Date)) patent77_1$Issue_Date &lt;- ymd(as.character(patent77_1$Issue_Date)) patent77_2 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_11.csv&quot;) patent77_2$App_Date &lt;- ymd(as.character(patent77_2$App_Date)) patent77_2$Issue_Date &lt;- ymd(as.character(patent77_2$Issue_Date)) patent77_3 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_12.csv&quot;) patent77_3$App_Date &lt;- ymd(as.character(patent77_3$App_Date)) patent77_3$Issue_Date &lt;- ymd(as.character(patent77_3$Issue_Date)) patent77_4 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_13.csv&quot;) patent77_4$App_Date &lt;- ymd(as.character(patent77_4$App_Date)) patent77_4$Issue_Date &lt;- ymd(as.character(patent77_4$Issue_Date)) # and so on ... Each file will look something like this: summary(patent77_1) ## WKU Title App_Date ## Length:1187 Length:1187 Min. :1963-10-18 ## Class :character Class :character 1st Qu.:1975-03-25 ## Mode :character Mode :character Median :1975-08-06 ## Mean :1975-06-03 ## 3rd Qu.:1975-12-05 ## Max. :1976-09-09 ## Issue_Date Inventor Assignee ICL_Class ## Min. :1977-03-08 Length:1187 Length:1187 Length:1187 ## 1st Qu.:1977-03-08 Class :character Class :character Class :character ## Median :1977-03-08 Mode :character Mode :character Mode :character ## Mean :1977-03-08 ## 3rd Qu.:1977-03-08 ## Max. :1977-03-08 ## References Claims ## Length:1187 Length:1187 ## Class :character Class :character ## Mode :character Mode :character ## ## ## … Then do that 100 more times. And if you want to edit it, edit it over 100 times, and again and again until you lose your mind. So how can we make this more efficient? "],["function-writing.html", "Function writing", " Function writing Let’s first take the three lines of code that we were writing to edit one single file, and make it generalizable. Below is the one-at-a-time version. What is it that we’re actually changing each time in this repeated code below? patent77_1 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_10.csv&quot;) patent77_1$App_Date &lt;- ymd(as.character(patent77_1$App_Date)) patent77_1$Issue_Date &lt;- ymd(as.character(patent77_1$Issue_Date)) patent77_2 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_11.csv&quot;) patent77_2$App_Date &lt;- ymd(as.character(patent77_2$App_Date)) patent77_2$Issue_Date &lt;- ymd(as.character(patent77_2$Issue_Date)) The filepath is the main thing that changes each time (and the name we assign to the output). But let’s focus on the filepath for now. To start writing a function, you want to give your function a name (I’ll call mine ‘process_patents’) and assign it using the function() function (trippy, I know). Inside the arguments of the function function will be the argument, the thing we want to generalize, in this case, the filepath. Let’s look at an example. I start by opening up the function with the curly brackets, pasting in the non-generalized code, and replacing the “repeated” thing with the argument. For now I have also changed the object name to df for simplicity. process_patents &lt;- function(x){ df &lt;- read.csv(x) df$App_Date &lt;- ymd(as.character(df$App_Date)) df$Issue_Date &lt;- ymd(as.character(df$Issue_Date)) } Note that we don’t need to name our argument x, we can name it whatever we want. It might be better to give it a more literal name, such as ‘filepath’. You just need to make sure you change it in the function’s arguments and inside the function text itself. process_patents &lt;- function(filepath){ df &lt;- read.csv(filepath) df$App_Date &lt;- ymd(as.character(df$App_Date)) df$Issue_Date &lt;- ymd(as.character(df$Issue_Date)) } Let’s give this a go. patent77_1 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_10.csv&quot;) summary(patent77_1) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## &quot;1977-03-08&quot; &quot;1977-03-08&quot; &quot;1977-03-08&quot; &quot;1977-03-08&quot; &quot;1977-03-08&quot; &quot;1977-03-08&quot; Our output is NOT what we would have expected. What happened? We didn’t ask the object to return the ‘df’ data frame, so it returned the last value it ran, which related to the issue date. To fix this, we just need one more line of code in the function. process_patents &lt;- function(filepath){ df &lt;- read.csv(filepath) df$App_Date &lt;- ymd(as.character(df$App_Date)) df$Issue_Date &lt;- ymd(as.character(df$Issue_Date)) return(df) } Now let’s see patent77_1 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_11.csv&quot;) summary(patent77_1) ## WKU Title App_Date ## Length:1283 Length:1283 Min. :1961-01-31 ## Class :character Class :character 1st Qu.:1975-03-27 ## Mode :character Mode :character Median :1975-08-15 ## Mean :1975-05-12 ## 3rd Qu.:1975-11-24 ## Max. :1976-08-30 ## Issue_Date Inventor Assignee ICL_Class ## Min. :1977-03-15 Length:1283 Length:1283 Length:1283 ## 1st Qu.:1977-03-15 Class :character Class :character Class :character ## Median :1977-03-15 Mode :character Mode :character Mode :character ## Mean :1977-03-15 ## 3rd Qu.:1977-03-15 ## Max. :1977-03-15 ## References Claims ## Length:1283 Length:1283 ## Class :character Class :character ## Mode :character Mode :character ## ## ## Better. But this still only reduces our code chunk from 3 to 1, and still leaves us to paste in every file path. So now it is time to move to iteration. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
