[["index.html", "Functions and Iterations Overview", " Functions and Iterations Reed Kenny and Tara Pozzi 2023-05-11 Overview This is a mini-lecture on function-writing and iteration using data from the Global Biodiversity Information Facility. "],["functions-can-be-like-personalized-mini-packages.html", "Functions can be like personalized Mini Packages", " Functions can be like personalized Mini Packages There are two main uses for functions that I can think of right now, one is to make yourself nifty little mini packages and the other is to make iteration easier. Let’s start with the first instance You may often find yourself in a situation where you need to do the same thing (or set of things) in R, over and over again. One thing that I often want to do is to look at a plant species range map. I generally pull occurence data from the Global Biodiversity Information Facility (GBIF), limiting the search to locations correspoding to a museum collection. This does not take many lines of code but I usually have to look it up. To make my life easier I can write a function to do this task and save the function to be accessible in any of my R sessions. The first step is to call GBIF and import the dataset of species occurrences library(rgbif) library(ggplot2) GBIF_Frax = occ_search(scientificName = &quot;Fraxinus velutina&quot;, hasCoordinate = TRUE, basisOfRecord = &quot;PRESERVED_SPECIMEN&quot;) Then I need to select just the data not the metadata that comes with Frax_dat &lt;- GBIF_Frax$data Then I can plot the occurrences wm &lt;- borders(&quot;world&quot;, colour=&quot;gray50&quot;, fill=&quot;gray50&quot;) #map backgroud ggplot()+ coord_fixed() + wm + geom_point(data = Frax_dat, aes(x = decimalLongitude, y = decimalLatitude), colour = &quot;darkred&quot;, size = 0.5) + theme_bw() + ggtitle(Frax_dat$scientificName) This is a fairly easy piece of code to turn into a function. If I were to do this with a different species, the only piece of information that changes is the speices name. So in my function, that is what I specify as the variable. dist_map &lt;- function(x) { GBIFdata = occ_search(scientificName = x, limit = 300, hasCoordinate = TRUE, basisOfRecord = &quot;PRESERVED_SPECIMEN&quot;) dat = GBIFdata$data wm = borders(&quot;world&quot;, colour=&quot;gray50&quot;, fill=&quot;gray50&quot;) #map backgroud p = ggplot()+ coord_fixed() + wm + geom_point(data = dat, aes(x = decimalLongitude, y = decimalLatitude), colour = &quot;darkred&quot;, size = 0.5) + theme_bw() + ggtitle(dat$scientificName) plot_list = p # save plot return(p) } Now when I want a species range map I can just use one line of code dist_map(&quot;Fremontodendron californicum&quot;) I can save that function to a separate script if I want to use it again in the future. I have a directory for my functions “~Desktop/R-functions” where I saved it. Now I can call it in any of my other script using the source() function. source(&quot;~/Documents/R_Projects/D-RUG/iterations/dist_map.R&quot;) dist_map(&quot;Fremontodendron californicum&quot;) "],["iteration.html", "Iteration 0.1 Objective 0.2 Iteration Examples 0.3 Final Plot", " Iteration Up until this point, we have been able to download and map the range of one plant species at a time. However, what if we want to download the data for and create a range map of several plant species? This is where iteration comes into play! Essentially, iteration is a way of running the code you wrote in your function multiple times. So if you ever find yourself copy-pasting, then you could likely benefit from using iteration. There are three main ways to do iterations: For Loops Apply functions Map functions 0.1 Objective The goal of this mini-workshop is to map multiple Fraxinus species in one plot. In order to do this, I will need to download the data for each Fraxinus species, combine each respective dataset into one dataframe, and then can use this dataframe to plot the range of multiple species. 0.2 Iteration Examples For Loops The first method I’ll will use is For Loops, which essentially repeats the code you’ve written across different input values (i). For example, for(i in 1:10) { print(i) } We will need to create an empty dataframe to save the results of the loop results &lt;- rep(NA, 10) for(i in 1:10) { results[i] &lt;- i*10 } Now let’s try to translate this to the GBIF example. # Now let&#39;s try bringing in multiple species ## create list of all Fraxinus species species_names &lt;- read.csv(&quot;fraxinus_species.csv&quot;) %&gt;% #I scraped this list off the GBIF website dplyr::select(Name)%&gt;% as.list() species_names ## For time sake I&#39;ll select the first few species species &lt;- c(&quot;Fraxinus albicans Buckley&quot;, &quot;Fraxinus americana&quot;, &quot;Fraxinus angustifolia&quot;, &quot;Fraxinus anomala&quot;, &quot;Fraxinus apertisquamifera&quot;) ### Let&#39;s just select columns of interest across datasets: colnames(df_FP) ### Columns we want: &quot;scientificName&quot;, &quot;decimalLatitude&quot;,&quot;decimalLongitude&quot; ## Function download_data &lt;- function(x){ GBIFdata &lt;- occ_search(scientificName = x, limit = 300, hasCoordinate = TRUE, basisOfRecord = &quot;PRESERVED_SPECIMEN&quot;) dat &lt;- GBIFdata$data dat &lt;- dat %&gt;% filter(scientificName != &quot;NA&quot;) %&gt;% #get rid of species name with &quot;NA&quot; dplyr::select(scientificName, decimalLatitude, decimalLongitude) return(dat) } ## create empty data frame comb_species &lt;- data.frame() ## Run the for loop for(i in species) { df &lt;- download_data(i) comb_species &lt;- bind_rows(comb_species, df) } Apply functions Another option for iteration are apply functions in base R. Check out this tutorial for more information: https://ademos.people.uic.edu/Chapter4.html. They often run faster than for loops &amp; can be a lot simpler to set up! comb_species_apply &lt;- lapply(species, FUN = download_data) #spits out a list! # how to go from list to dataframe? # do.call calls the function you specify and runs it on the next argument comb_species_apply_df &lt;- do.call(&quot;bind_rows&quot;, comb_species_apply) #this will turn the list into a dataframe Map functions Apply functions are very handy, but for those dedicated to tidyverse you might be interested in the map family of functions from the purrr package (which is in the tidyverse suite of packages). Check out this tutorial for more: https://jennybc.github.io/purrr-tutorial/ comb_species_map &lt;- purrr::map(species, .f = download_data) comb_species_map_df &lt;- do.call(&quot;bind_rows&quot;, comb_species_apply) 0.3 Final Plot Now let’s make a nice plot! wm = borders(&quot;world&quot;, colour=&quot;gray50&quot;, fill=&quot;gray50&quot;) #map backgroud ggplot2::ggplot()+ coord_fixed() + wm + geom_point(data = comb_species, aes(x = decimalLongitude, y = decimalLatitude, color = scientificName),size = 0.5) + theme_bw() + theme(legend.position = &quot;bottom&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
